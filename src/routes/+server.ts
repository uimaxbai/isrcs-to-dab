import type { RequestHandler } from './$types';
import { json } from '@sveltejs/kit';
import { DAB_EMAIL, DAB_PASSWORD } from '$env/static/private';

export const POST: RequestHandler = async ({ request }) => {
    // Process the POST request data
    let data;
    try {
        data = await request.json();
        if (!data || !Array.isArray(data) || data.length === 0) {
            return json({ success: false, message: 'Invalid data format. Give me a JSON array of ISRCs.', url: "" }, { status: 400 });
        }
    } catch (e) {
        return json({ success: false, message: 'Invalid JSON', url: "" }, { status: 400 });
    }
    console.log('Received POST request', data);
    
    let allSuccess = true;
    let libraryID = "";
    // Login to DAB
    return fetch('https://dab.yeet.su/api/auth/login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'isrcbot/1.0.0'
        },
        body: JSON.stringify({
            email: DAB_EMAIL, 
            password: DAB_PASSWORD
        }),
    }).then(response => {
        if (!response.ok) {
            throw new Error('Error logging in to DAB: ' + response.statusText);
        }
        const cookies = response.headers.getSetCookie();
        // Return the first cookie string, or null if none exist
        return cookies.length > 0 ? cookies[0] : null;
    }).then(dabCookie => { // dabCookie is string | null
        if (!dabCookie) { // Check for null or empty string
            throw new Error('No valid cookie found in response');
        }
        // At this point, dabCookie is guaranteed to be a non-empty string
        let dabSessionCookie = dabCookie.split(';').find(cookie => cookie.startsWith('session='));
        if (!dabSessionCookie) {
            throw new Error('Session cookie not found in response');
        }
        // Pass the session cookie to the next step
        return dabSessionCookie;
    }).then(dabSessionCookie => {
        // Create a new library
        let currentDate = new Date();
        return fetch('https://dab.yeet.su/api/libraries', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'User-Agent': 'isrcbot/1.0.0',
                'Cookie': dabSessionCookie // Use the session cookie here
            },
            body: JSON.stringify({
                name: currentDate.getTime().toString(),
                description: `Auto-generated by isrcbot on ${currentDate.toString()}`,
                isPublic: true,
            })
        }).then(response => {
            if (!response.ok) {
                throw new Error('Error creating library: ' + response.statusText);
            }
            return response.json();
        }).then(data => {
            return {
                res: data,
                cookie: dabSessionCookie
            };
        });
    }).then(dabSessionCookie => { // Use dabSessionCookie here
        // console.log('DAB Session Cookie:', dabSessionCookie);
        // console.log(dabSessionCookie.res.library)
        libraryID = dabSessionCookie.res.library.id;
        // console.log('Library ID:', libraryID);
        // Validate ISRCs
        data.forEach((isrc: string) => {
            fetch(`https://eu.qobuz.squid.wtf/api/get-music?q=${isrc}&offset=0&limit=0`)
                .then(response => {
                    if (!response.ok) {
                        return json({ success: false, message: 'Error fetching data from Qobuz', url: "" }, { status: 500 });
                    }
                    return response.json();
                }).then(data => {
                    let tracks = [];
                    if (!data.data.tracks) {
                        allSuccess = false;
                        console.error('Error fetching data from Qobuz:', data);
                    } else {
                        tracks = data.data.tracks.items;
                        let correctTracks = tracks.filter((track: any) => track.isrc === isrc);
                        let trackIds = correctTracks.map((track: any) => track.id);
                        // Cross reference with DAB to make sure right track is selected
                        fetch(`https://dab.yeet.su/api/search?q=${isrc}&offset=0&type=track`)
                            .then(response => {
                                if (!response.ok) {
                                    allSuccess = false;
                                    console.error('Error fetching data from Dab:', response.statusText);
                                }
                                return response.json();
                            }).then(data => {
                                let tracks = data.tracks;
                                // console.log('Tracks from Dab:', tracks);
                                let correctTracks = tracks.filter((track: any) => trackIds.includes(track.id));
                                // console.log('Correct tracks:', correctTracks);
                                // Find the track with highest audio quality
                                let bestTrack = correctTracks.reduce((best: any, track: any) => {
                                    if (!best || (track.audioQuality.maximumBitDepth > best.audioQuality.maximumBitDepth)) {
                                        return track;
                                    } else if (track.audioQuality.maximumBitDepth === best.audioQuality.maximumBitDepth) {
                                        if (track.audioQuality.maximumSampleRate > best.audioQuality.maximumSampleRate) {
                                            return track;
                                        }
                                    }
    
                                    // If there is no new best track, return the current best
                                    return best;
                                }, null);
                                // console.log('Best track:', bestTrack);
                                // Add the track to the library
                                fetch(`https://dab.yeet.su/api/libraries/${dabSessionCookie.res.library.id}/tracks`, {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'User-Agent': 'isrcbot/1.0.0',
                                        'Cookie': dabSessionCookie.cookie // Use the session cookie here
                                    },
                                    body: JSON.stringify({
                                        track: bestTrack
                                    })
                                // console.log('Track IDs:', trackIds);
                                }).catch(error => {
                                    allSuccess = false;
                                    console.error('Error fetching data from Dab:', error);
                                });
                            });
                    }
                })
        });
    }).then(_ => {
        if (!allSuccess) {
            return json({ success: true, message: 'Error processing some tracks', url: `https://dab.yeet.su/shared/library/${libraryID}` });
        }
        return json({ success: true, message: 'All tracks processed', url: `https://dab.yeet.su/shared/library/${libraryID}` });
    }).catch(_ => {
        return json({ success: false, message: 'Internal Server Error', url: "" }, { status: 500 });
    });
    




    // Return a response
    // console.log(libraryID);
    
};